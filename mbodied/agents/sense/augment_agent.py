# Copyright 2024 mbodi ai
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from mbodied.agents.sense.sensory_agent import SensoryAgent
from mbodied.types.sense.vision import Image


class AugmentAgent(SensoryAgent):
    """Augment agent to generate augmented images using i.e. stable diffusion."""

    def __init__(
        self,
        model_src=None,
        model_kwargs=None,
        **kwargs,
    ):
        super().__init__(
            model_src=model_src,
            model_kwargs=model_kwargs,
            **kwargs,
        )

    def act(self, instruction: str, image: Image, *args, **kargs) -> Image:
        """Act based on the prompt and image using the remote augment server.

        Args:
            instruction (str): The instruction to act on.
            image (Image): The image to act on.
            *args: Variable length argument list.
            **kargs: Arbitrary keyword arguments.

        Returns:
            Image: The augmented image generated by the agent
        """
        if self.actor is None:
            raise ValueError("Remote actor for Augment agent not initialized.")
        response = self.actor.predict(image.base64, instruction, *args, **kargs)
        return Image(response)


# Example usage:
if __name__ == "__main__":
    augment_agent = AugmentAgent(model_src="https://api.mbodi.ai/augment/")
    result = augment_agent.act(instruction="change lighting", image=Image("resources/xarm.jpeg", size=(224, 224)))
    print(result)
    result.pil.show()
